<div class="content inner_page">
  
  <div class="container">
    <!-- Input Section -->
   <div class="order-input-section">
      <label for="order-id">Enter Order ID:</label>
      <div class="input-field">
        <input type="text" id="order-id" placeholder="Enter your order ID" value="#TGS">
        <div class="error-class"></div>
        </div>
      <button id="fetch-order-status" class="fetch-button">
        <span class="button-text">Track Order</span>
        <span class="button-loader" style="display: none;"></span>
      </button>
    </div>

    <!-- Tracking Content -->
    <div class="tracking-container" id="tracking-container" style="display: none;">
      <!-- Header Section -->
      <div class="tracking-header">
        <h1>Tracking Order No: <span id="order_number">Loading...</span></h1>
      </div>

      <!-- Progress Section -->
      <div class="tracking-progress">
        <div class="stage" id="stage-order-placed">
          <div class="icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="21.204" height="20.309" viewBox="0 0 21.204 20.309" class="shopping-cart-icon">
              <g id="Icon_feather-shopping-cart" data-name="Icon feather-shopping-cart" transform="translate(-0.75 -0.75)">
                <path id="Path_29341" data-name="Path 29341" d="M13.791,30.9a.9.9,0,1,1-.9-.9A.9.9,0,0,1,13.791,30.9Z" transform="translate(-4.23 -11.483)" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path>
                <path id="Path_29342" data-name="Path 29342" d="M30.291,30.9a.9.9,0,1,1-.9-.9A.9.9,0,0,1,30.291,30.9Z" transform="translate(-10.878 -11.483)" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path>
                <path id="Path_29343" data-name="Path 29343" d="M1.5,1.5H5.083l2.4,11.993a1.791,1.791,0,0,0,1.791,1.442H17.98a1.791,1.791,0,0,0,1.791-1.442L21.2,5.978H5.978" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></path>
              </g>
            </svg>
          </div>
          <span>Order Placed</span>
        </div>
       <div class="stage" id="stage-order-packed">
        <div class="icon">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="1em" height="1em">
            <path d="M4 4h16v2H4V4zm0 5h16v2H4V9zm0 5h10v2H4v-2zm0 5h16v2H4v-2z" fill="currentColor" />
          </svg>
        </div>
        <span>Order Packed</span>
      </div>

       <div class="stage" id="stage-shipped">
        <div class="icon">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="1em" height="1em">
            <path d="M21 6h-3.02L12 0 6.02 6H3a2 2 0 0 0-2 2v14h4v-2h14v2h4V8a2 2 0 0 0-2-2zM12 3.27L14.73 6H9.27L12 3.27zM4 18v-4h16v4H4zm16-6H4V8h16v4z" fill="currentColor" />
          </svg>
        </div>
        <span>Shipped</span>
      </div>
        <div class="stage" id="stage-delivered">
          <div class="icon">
           <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 25.237 23.266" width="1em" height="1em">
              <path d="M25.093,14.341l-4.124-4.134a.493.493,0,0,0-.349-.145H16.956v-1.2a.493.493,0,0,0,.394-.483V4.436a.493.493,0,0,0-.493-.493h-4.24A2.464,2.464,0,1,0,8.675.988,2.464,2.464,0,1,0,4.733,3.943H.493A.493.493,0,0,0,0,4.436V8.38a.493.493,0,0,0,.493.493H7V19.319l0,.005a2.463,2.463,0,0,0-4.076.2H1.38v-7.2a.493.493,0,1,0-.986,0v7.689a.493.493,0,0,0,.493.493h1.69a2.446,2.446,0,0,0,.476,1.774H.493a.493.493,0,1,0,0,.986H8.967a2.459,2.459,0,0,0,2.446-2.76h7.139a2.5,2.5,0,0,0-.018.3,2.452,2.452,0,0,0,.494,1.479H14.891a.493.493,0,0,0,0,.986H21A2.467,2.467,0,0,0,23.463,20.8a2.5,2.5,0,0,0-.018-.3h1.3a.493.493,0,0,0,.493-.493V14.689A.493.493,0,0,0,25.093,14.341Zm-.842,1.63H20.907l2.213-2.213,1.132,1.135Zm-5.028-.493V14.466l2.3-2.3.9.9-2.879,2.879A.493.493,0,0,1,19.224,15.477Zm1.608-4.013-1.608,1.608V11.048h1.192ZM16.365,7.887H10.351V4.929h6.014Zm-7.4,10.45a2.452,2.452,0,0,0-.982.2V4.929h1.38v13.44A2.472,2.472,0,0,0,8.967,18.336ZM10.647.986a1.479,1.479,0,0,1,0,2.957H9.865l.851-.851a.493.493,0,0,0-.7-.7l-.851.851V2.465A1.48,1.48,0,0,1,10.647.986ZM5.225,2.465a1.479,1.479,0,1,1,2.957,0v.782L7.332,2.4a.493.493,0,0,0-.7.7l.851.851H6.7A1.48,1.48,0,0,1,5.225,2.465ZM.986,7.887V4.929H7V7.887ZM3.545,20.8A1.479,1.479,0,1,1,5.024,22.28,1.48,1.48,0,0,1,3.545,20.8ZM7,22.278v0h0Zm1.972,0A1.479,1.479,0,1,1,10.446,20.8,1.48,1.48,0,0,1,8.967,22.28Zm5.475-2.76H11.071a2.484,2.484,0,0,0-.72-.756V8.872H15.97V19.519ZM21,22.28A1.479,1.479,0,1,1,22.477,20.8,1.48,1.48,0,0,1,21,22.28Zm2.1-2.76a2.463,2.463,0,0,0-4.209,0H16.956V11.048h1.282v4.43a1.48,1.48,0,0,0,1.479,1.479h4.535v2.563Zm0,0"></path>
            </svg>
          </div>
          <span>Delivered</span>
        </div>
      </div>
      <!-- Details Section -->
      <div class="tracking-details">
        <span>Shipped Via: <strong id="shipped_via" class="tracking_details_value">Loading...</strong></span>
        <span>Status: <strong id="order_status"class="tracking_details_value" >Loading...</strong></span>
        <span>Track Order: <strong id="tracking_url" class="tracking_details_value">Loading...</strong></span>
      </div>
    </div>
  </div>
</div>

<style>
  .order-input-section {
    margin: 20px 0;
    text-align: center;
  }

  .order-input-section input {
    padding: 10px;
    font-size: 16px;
    width: 300px;
    margin-right: 10px;
  }

  .order-input-section .fetch-button {
    padding: 10px 20px;
    font-size: 16px;
    /* background-color: #007bff; */
    background-color: #333;
    color: white;
    border: none;
    cursor: pointer;
    border-radius: 4px;
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    height: 50px; /* Fixed height */
    width: 160px; /* Fixed width */
  }

  .order-input-section .fetch-button:hover {
    background-color: #fff;
  }

  .button-text {
    display: inline;
  }

  .button-loader {
    border: 3px solid white;
    border-top: 3px solid #3498db;
    border-radius: 50%;
    width: 16px;
    height: 16px;
    animation: spin 1s linear infinite;
    display: inline-block;
    margin-left: 10px;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .tracking-container {
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    max-width: 800px;
    margin: 20px auto;
    background-color: #fff;
  }

  .tracking-header {
    background-color: #333;
    color: #fff;
    padding: 15px 20px;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    text-align: center;
  }

  .tracking-header h1 {
    font-size: 16px;
    margin: 0;
    font-weight: normal;
    color: white;
  }

  .tracking-details {
    padding: 20px;
    display: flex;
    justify-content: space-between;
    font-size: 14px;
  }

  .tracking-progress {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding: 20px;
    width:100%;
    overflow:auto;
  }

  .stage {
    text-align: center;
    flex: 1;
    position: relative;
  }

  .stage::after {
    content: '';
    position: absolute;
    top: 40px;
    left: 50%;
    width: 100%;
    height: 4px;
    background: #ddd;
    z-index: 0;
  }

  .stage.completed.active::after {
    background: #4bcd83;
  }
   .stage.completed::after {
    background: #4bcd83;
  }
  .stage.completed.order_cancelled::after {
    background: #e45f5f;
  }
  
  .stage.completed.order_cancelled .icon {
      background-color: #e45f5f;
  }

  
 .stage.completed .icon svg {
    color: #fff; /* White color for the icons */
    fill: currentColor; /* Ensure fill matches the inherited color */
}
  .stage.completed .shopping-cart-icon {
    color: #fff; /* Set the desired color */
}
  .stage.active::after {
    background: #007bff;
  }

  .stage:last-child::after {
    content: none;
  }

  .stage .icon {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    background-color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
    z-index: 2;
    position:relative;
    border: 1px solid #e5e6e8;
  }

  .stage.completed .icon {
    background-color: #4bcd83;
  }

  .stage.active .icon {
    background-color: #007bff;
  }

  .stage span {
    margin-top: 10px;
    display: block;
    font-size: 12px;
    padding: 0 2px;
  }

  .tracking-progress::-webkit-scrollbar {
      height: 5px;
  }
  
  @media (max-width: 565px)  {
    .stage .icon {
      width: 50px;
      height: 50px;
      font-size:20px;
    }
    .stage::after {
      top: 24px;
    }
    .tracking_details_value{
      display: block;
    }
    .tracking-details {
      display: grid;
      grid-template-columns: repeat(3, 33.33%);
      font-size: 12px;
      text-align: center;
    }
  }

     #order-id {
        height: 50px;
        border-radius: 5px;
        border: 1px solid #1e1e1e;
    }

    .error-class {
        width: 100%;
        text-align: left;
        color: red;
        font-weight: 400;
    }
    .order-input-section {
        padding: 10px 15px;
        display: flex;
        justify-content: center;
    }
    .order-input-section label {
        line-height: 50px;
        margin-right: 10px;
    }
    
    @media (max-width: 767px) {
        #order-id {
            width: 100%;
        }
        
        .order-input-section { 
            flex-wrap: wrap;
        }
        .order-input-section label {
            display: block;
            width: 100%;
            text-align: left;
            margin-bottom: 8px;
            line-height: normal;
            margin-right: 0;
        }
        .input-field {
            width: calc(100% - 132px);
            margin-right: 10px;
        }
        #fetch-order-status {
            width: 120px;
        }
    }

  .fetch-button:hover {
    border: 1px solid var(--color_black);
    color: var(--color_black);
    background-color: #fff #important;
}
  
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
    const fetchButton = document.getElementById("fetch-order-status");
    const buttonText = fetchButton.querySelector(".button-text");
    const buttonLoader = fetchButton.querySelector(".button-loader");
    const orderInput = document.getElementById("order-id");
    const trackingContainer = document.getElementById("tracking-container");

    const errorDiv = document.querySelector(".error-class");
    const defaultPrefix = "#TGS";
    const orderIdPattern = /^#TGS\d+$/i; // Pattern to validate order IDs (e.g., #TGS12345)

    // Function to normalize the input
    const normalizeOrderId = (input) => {
        const plainNumberMatch = input.match(/^\d+$/); // If input is a plain number
        const tgsNumberMatch = input.match(/^tgs(\d+)$/i); // If input starts with TGS
        const fullPatternMatch = input.match(/^#tgs\d+$/i); // If input matches the full pattern

        if (plainNumberMatch) return `${defaultPrefix}${plainNumberMatch[0]}`;
        if (tgsNumberMatch) return `${defaultPrefix}${tgsNumberMatch[1]}`;
        if (fullPatternMatch) return input.toUpperCase(); // Ensure consistency
        return null; // Invalid input
    };

    // Function to display error messages
    const displayError = (message) => {
        errorDiv.textContent = message;
        errorDiv.style.display = "block"; // Show the error message
    };

    // Function to clear error messages
    const clearError = () => {
        errorDiv.textContent = "";
        errorDiv.style.display = "none"; // Hide the error message
    };

    // Handle input change
    orderInput.addEventListener("input", () => {
        clearError();
        const normalized = normalizeOrderId(orderInput.value.trim());
        if (normalized) {
            orderInput.value = normalized;
        } else {
            orderInput.value = defaultPrefix; // Reset to default prefix on invalid input
        }
    });

    // Handle paste events
    orderInput.addEventListener("paste", (event) => {
        const clipboardData = event.clipboardData.getData("text").trim();

        setTimeout(() => {
            const normalized = normalizeOrderId(clipboardData);
            if (normalized) {
                orderInput.value = normalized;
                clearError();
            } else {
                event.preventDefault();
                displayError("Please enter a valid order ID (e.g., #TGS12345).");
            }
        }, 0);
    });

    // Validate input on change
    orderInput.addEventListener("change", () => {
        if (!normalizeOrderId(orderInput.value)) {
            displayError("Please enter a valid order ID (e.g., #TGS12345).");
            orderInput.value = defaultPrefix; // Reset to default prefix
        } else {
            clearError(); // Clear error if input is valid
        }
    });

    // Handle button click
    fetchButton.addEventListener("click", async () => {
        const orderId = orderInput.value.trim();

        // Validate input value
        if (!normalizeOrderId(orderId)) {
            displayError("Please enter a valid order ID (e.g., #TGS12345).");
            return;
        }

        // Disable the button and input field, show loader
        fetchButton.disabled = true;
        orderInput.disabled = true;
        fetchButton.classList.add("disabled");
        buttonText.style.display = "none";
        buttonLoader.style.display = "inline-block";

        try {
            // Make API call to fetch order status
            const response = await fetch("https://tgs.velsof.com/order_status", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "x-api-key": "339308f5c7eac7cdaffd9646d61109a7", // Include API key if needed
                },
                body: JSON.stringify({ order_number: orderId }),
            });

            const result = await response.json();

            if (response.ok && result.status) {
                // Populate tracking data
                const { order_number, tracking_info, fulfillment_status, shipment_status , cancelled} = result.data;
                document.getElementById("order_number").textContent = order_number;
                document.getElementById("shipped_via").textContent =
                    tracking_info[0]?.company || "Not Available";
                document.getElementById("order_status").textContent = fulfillment_status;

                var trackingUrl = "";
                var trackingUrlElement = document.getElementById("tracking_url");
                trackingUrlElement.textContent = "Not Available";
                
              if(tracking_info.length>0) {
                   trackingUrl = tracking_info[0]?.url;
                   if (tracking_info[0]?.company.toLowerCase() === "rpsg") {
                      document.getElementById("shipped_via").textContent = "Local Partner";
                        const phoneNumber = tracking_info[0]?.number;
                        if (phoneNumber) {
                            trackingUrlElement.innerHTML = `<a href="tel:${phoneNumber}" target="_blank">Click Here</a>`;
                        } else {
                            trackingUrlElement.textContent = "Phone number not available";
                        }
                    } else if (trackingUrl) {
                        trackingUrlElement.innerHTML = `<a href="${trackingUrl}" target="_blank">Click Here</a>`;
                    } else {
                        trackingUrlElement.textContent = "No Tracking URL Available";
                    }
                }
               

                // Update stages based on shipment status
               const stages = document.querySelectorAll(".stage");
                stages.forEach((stage) => {
                    stage.classList.remove("completed", "order_cancelled", "active");
                });

                if (shipment_status === "delivered") {
                    stages.forEach((stage) => stage.classList.add("completed"));
                    document.getElementById("order_status").textContent = "Delivered";
                    stages.forEach((stage, index) => {
                        stage.classList.add("completed");
                        if(index == 3 && cancelled == 1) {
                           stage.classList.add("order_cancelled");
                            document.getElementById("order_status").textContent = "Cancelled";
                        }
                    });

                } else if (trackingUrl != "") {
                   document.getElementById("order_status").textContent = "Shipped";
                    stages.forEach((stage, index) => {
                        if (index <= 2) stage.classList.add("completed");
                        else stage.classList.remove("completed", "active");
                         if(index == 2 && cancelled == 1) {
                             stage.classList.add("order_cancelled");
                             document.getElementById("order_status").textContent = "Cancelled";
                          }
                    });
                   
                }  else if (fulfillment_status === "fulfilled") {
                   document.getElementById("order_status").textContent = "Fulfilled";
                    stages.forEach((stage, index) => {
                        if (index <= 1) stage.classList.add("completed");
                        else stage.classList.remove("completed", "active");
                       if(index == 1 && cancelled == 1) {
                           stage.classList.add("order_cancelled");
                         document.getElementById("order_status").textContent = "Cancelled";
                        }
                    });
                   
                } else if (fulfillment_status === "unfulfilled") {
                  document.getElementById("order_status").textContent = "Unfulfilled";
                    stages.forEach((stage, index) => {
                        if (index === 0) stage.classList.add("completed");
                        else stage.classList.remove("completed", "active");
                       if(index == 0 && cancelled == 1) {
                           stage.classList.add("order_cancelled");
                         document.getElementById("order_status").textContent = "Cancelled";
                        }
                    });
                   
                } else {
                    stages.forEach((stage) => stage.classList.remove("completed", "active"));
                }

                trackingContainer.style.display = "block";
                clearError(); // Clear any previous error messages
            } else {
                displayError(result.message || "Order not found. Please try again.");
            }
        } catch (error) {
            console.error("Error fetching order status:", error);
            displayError("An error occurred. Please try again.");
        } finally {
            // Re-enable the button and input field
            fetchButton.disabled = false;
            orderInput.disabled = false;
            fetchButton.classList.remove("disabled");
            buttonText.style.display = "inline";
            buttonLoader.style.display = "none";
        }
    });
});
</script>
