{% if collection.metafields.custom.filter.value == true %}
  <div class="collection page-width">
    <section class="price_filter">
      <div id="btn">
        <button id="filter-btn" class="filter-btn">Price</button>
      </div>
      <div id="filter-card" class="filter-card hidden">
        <h3>Filter by Price</h3>
        <form id="filter-form">
          {% for block in section.blocks %}
            {% if block.settings.filter_type != 'product_tag' %}
              <label>
                <input
                  type="radio"
                  name="price-filter"
                  id="{{ block.id }}"
                  data-filter-type="{{ block.settings.filter_type }}"
                  data-min-value="{{ block.settings.min_value }}"
                  data-max-value="{{ block.settings.max_value }}"
                  data-product-tag="{{ block.settings.product_tag }}"
                >
                {{ block.settings.block_heading }}
              </label>
            {% endif %}
          {% endfor %}
        </form>
      </div>
      <div class="btn-container">
        <div id="selected-filter" class="selected-filter hidden">
          <div id="filter-label">
            <span id="filter-text" style="width:max-content;"></span>
            <button class="btn_tab" id="all_in_stock">x</button>
          </div>
        </div>
        {% if collection.metafields.custom.pill_filter_tag %}
          {% assign filter_objects = collection.metafields.custom.pill_filter_tag.value %}
          {% for filter in filter_objects %}
            <div
              class="selected-filter btn-tabs filter-tag filter tag-{{ filter.filter_tag }}"
              data-filter-type="product_tag"
              data-product-tag="{{ filter.filter_tag }}"
              style="display:none"
            >
              <span
                class="filter-tag"
              >
                {{ filter.filter_heading }}
              </span>
            </div>
          {% endfor %}
        {% endif %}
      </div>
    </section>
  </div>
{% endif %}
<script>
           document.addEventListener("DOMContentLoaded", function () {
             const filterBtn = document.getElementById("filter-btn");
             const filterCard = document.getElementById("filter-card");
             const filterForm = document.getElementById("filter-form");
            const filterTag = document.querySelectorAll(".filter");
             const selectedFilter = document.getElementById("selected-filter");
             const filterText = document.getElementById("filter-text");
             const clearFilter = document.getElementById("all_in_stock");

             let activeTags = new Set();
             let activePrice = null;
      //Click for open the price filter card
             filterBtn.addEventListener("click", function () {
               filterCard.classList.toggle("hidden");
             });
      //Make a unique array of product tags available in the all product cards.
            // const productCards = document.querySelectorAll(".grid__item");
            const productCards = document.querySelectorAll(".all_in_stock");

             const allTagsSet = new Set();
             const filters = document.querySelectorAll(".filter");
             productCards.forEach(card => {
               card.classList.forEach(cls => {
                   allTagsSet.add(cls);
                 })
               });
       //Only those filter tags visible which is available in the PLP of each cards.
         filters.forEach(filter => {
               const tag = filter.dataset.productTag;
               if (allTagsSet.has(tag)) {
                 filter.style.display = "block";
               } else {
                 filter.style.display = "none";
               }
             });
      //click on tags based pill filter the product and make a uniue set that collect the active tags.
  $(".filter").on("click", function () {
      const productTag = this.dataset.productTag;

      // Check if the clicked filter already has the 'active' class
      const isActive = this.classList.contains("active");

      // If it's active, remove the 'active' class and clear the activeTags set
      if (isActive) {
          this.classList.remove("active");
          this.style.backgroundColor = "";
          this.style.color = "";

          // Remove the productTag from the activeTags set
          activeTags.delete(productTag);
      } else {
          // Otherwise, make the clicked filter active and add the productTag to activeTags
          // Remove 'active' class from all filters
          filters.forEach(f => {
              f.classList.remove("active");
              f.style.backgroundColor = "";
              f.style.color = "";
          });

          // Clear the activeTags set and add only the clicked tag
          activeTags.clear();
          activeTags.add(productTag);

          // Mark this filter as active
          this.classList.add("active");
          this.style.backgroundColor = "black";
          this.style.color = "white";
      }

      // Apply combined filters based on active tags
      applyCombinedFilters();
  });

      //Select the price range from the price filter card.
        filterForm.addEventListener("change", function (event) {
               const selectedOption = event.target;
               if (selectedOption.checked) {
                 const selectedLabel = selectedOption.parentElement.textContent.trim();
                 const filterType = selectedOption.getAttribute("data-filter-type");
                 const minValue = selectedOption.getAttribute("data-min-value");
                 const maxValue = selectedOption.getAttribute("data-max-value");

                 activePrice = {
                   type: filterType,
                   min: parseFloat(minValue),
                   max: parseFloat(maxValue),
                 };

                 filterText.textContent = selectedLabel;
                 selectedFilter.classList.remove("hidden");
                 filterCard.classList.add("hidden");
      //Apply filter price and tag based together.
                 applyCombinedFilters();
               }
             });
      //clear price filter
             clearFilter.addEventListener("click", function () {
               selectedFilter.classList.add("hidden");
               filterText.textContent = "";
               filterForm.reset();
               activePrice = null;
      //Apply filter price and tag based together.
               applyCombinedFilters();
             });

      //Disable the card
             document.addEventListener("click", function (event) {
               if (!filterBtn.contains(event.target) && !filterCard.contains(event.target)) {
                 filterCard.classList.add("hidden");
               }
             });
    //Below are the function for apply both filter together.
             function applyCombinedFilters() {
               const productCards = document.querySelectorAll(".grid__item");
                 var i=0;

               productCards.forEach((card) => {
                 const productPrice = parseFloat(card.getAttribute("price")) || 0;
                 const hasStockClass = card.classList.contains("all_in_stock");
                  let matchesTag = activeTags.size === 0 || [...activeTags].every(tag => card.classList.contains(tag));
                   let matchesPrice = true;

                 let isPriceMatch = true;
                 if (activePrice!=null) {
                   const type = activePrice.type;
                   if (type === "greater") {
                     isPriceMatch = productPrice > activePrice.min;
                   } else if (type === "between") {
                     isPriceMatch = productPrice >= activePrice.min && productPrice <= activePrice.max;
                   } else if (type === "below") {
                     isPriceMatch = productPrice < activePrice.max;
                   }
                 }

                 if (isPriceMatch && matchesTag && hasStockClass) {
                   card.style.display = "block";
                 } else {
                   card.style.display = "none";
                 }
               });
             }
           });
</script>

<style>
        /* General Styles */
        .price_filter {
          padding-top:12px;
          position: relative;
          display: flex;
        }
       #filter-text{
         color:gray;
       }
      #filter-label{
        display:flex;
      }
        /* Filter Button */
        .filter-btn {
          width:80px;
          background-color: #FFF0D9;
          color: var(--color-base-accent-1);
          border: none;
          padding: 8px 8px;
          font-size: smaller;
          cursor: pointer;
          border-radius: 5px;
          text-align:left;
          border-radius: 23px;
          font-weight:300;
             height: 28px;
    margin-top: 2px;


        }
      #btn{
        position:relative;
      }
      #btn::after{
        content: "";
          cursor: pointer;
        position: absolute;
        right: 8px;
        top: 45%;
        transition: all 0.2s ease-in-out;
        display: block;
        width: 8px;
        height: 8px;
        border-top: solid 2px black;
        border-right: solid 2px black;
        transform: translateY(-50%) rotate(135deg);
      }
        /* Filter Card */
        .filter-card {
          position: absolute;
          top: 55px;
          left: 0;
          background: white;
          border: 1px solid #ddd;
          border-radius: 8px;
          padding: 10px;
          box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
          width: 170px;
          z-index:2;
        }

        .filter-card h3 {
          margin-bottom: 10px;
          font-size: 14px;
          color: #333;
        }

        .filter-card label {
          display: block;
          padding: 5px 0;
          font-size: 14px;
          cursor: pointer;
        }

        .selected-filter {
          display: inline-flex;
          align-items: center;
          background: #FFF0D9;
          padding: 2px 10px;
          margin-left: 10px;
          margin-top:2px;
          border-radius: 23px;
          border: 0px solid black;
          width:auto;
          height: fit-content;
          cursor:pointer;
          font-weight:100;
          font-size:smaller;
        }
    .btn-container{
      display:flex;
      overflow:auto;
      white-space:nowrap;
    }
    .btn-container::-webkit-scrollbar {
      height: 0px;
  }

        .selected-filter button {
          background: transparent;
          border: none;
          cursor: pointer;
          font-size: 18px;
          margin-left: 5px;
        }
    .tag-filter {
      cursor: pointer;
      /* padding: 6px 12px; */
      background-color: white;
      color: black;
      /* transition: all 0.3s ease; */
    }

     .tag-filter.active {
      background-color: #000;
      color: #fff;
    }
        .hidden {
          display: none;
        }
</style>
{% schema %}
{
  "name": "Dynamic Price Filter",
  "settings": [
    {
      "type": "text",
      "id": "filter_heading",
      "label": "Filter Heading",
      "default": "Filter by Price"
    }
  ],
  "blocks": [
    {
      "type": "price_filter",
      "name": "Price Range Block",
      "settings": [
        {
          "type": "text",
          "id": "block_heading",
          "label": "Block Heading",
          "default": "Select Price Range"
        },
        {
          "type": "number",
          "id": "min_value",
          "label": "Minimum Price",
          "default": 0
        },
        {
          "type": "number",
          "id": "max_value",
          "label": "Maximum Price",
          "default": 1000
        },
        {
          "type": "select",
          "id": "filter_type",
          "label": "Filter Type",
          "options": [
            { "value": "greater", "label": "Greater than" },
            { "value": "between", "label": "Between" },
            { "value": "below", "label": "Below" }

          ],
          "default": "below"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Dynamic Price Filter",
      "category": "Filters",
      "blocks": [
        {
          "type": "price_filter"
        }
      ]
    }
  ]
}
{% endschema %}
