/*
Generated time: July 23, 2025 12:02
This file was created by the app developer. Feel free to contact the original developer with any questions. It was minified (compressed) by AVADA. AVADA do NOT own this script.

Modified: Added condition to redirect to /cart page when cart icon is clicked on cart page instead of opening cart drawer
Date: 06-08-2025
*/
class CartDrawer extends HTMLElement { constructor() { super(), this.addEventListener("keyup", e => "Escape" === e.code && this.close()), this.querySelector("#CartDrawer-Overlay").addEventListener("click", this.close.bind(this)), this.setHeaderCartIconAccessibility() } setHeaderCartIconAccessibility() { let t = document.querySelector("#cart-icon-bubble"), r = document.querySelector("#cart-icon-bubble-1"); t && (t.setAttribute("role", "button"), t.setAttribute("aria-haspopup", "dialog"), t.addEventListener("click", e => { validateDeliveryDates(), "/cart" === window.location.pathname ? (window.location.href = "/cart", void 0) : (e.preventDefault(), this.open(t)) }), t.addEventListener("keydown", e => { "SPACE" === e.code.toUpperCase() && ("/cart" === window.location.pathname ? (window.location.href = "/cart", void 0) : (e.preventDefault(), this.open(t))) })), r && (r.setAttribute("role", "button"), r.setAttribute("aria-haspopup", "dialog"), r.addEventListener("click", e => { validateDeliveryDates(), "/cart" === window.location.pathname ? (window.location.href = "/cart", void 0) : (e.preventDefault(), this.open(r)) }), r.addEventListener("keydown", e => { "SPACE" === e.code.toUpperCase() && ("/cart" === window.location.pathname ? (window.location.href = "/cart", void 0) : (e.preventDefault(), this.open(r))) })) } open(e) { $(".zsiq-float").css("display", "none"), e && this.setActiveElement(e); e = this.querySelector('[id^="Details-"] summary'); e && !e.hasAttribute("role") && this.setSummaryAccessibility(e), setTimeout(() => { this.classList.add("animate", "active") }), this.addEventListener("transitionend", () => { var e = this.classList.contains("is-empty") ? this.querySelector(".drawer__inner-empty") : document.getElementById("CartDrawer"), t = this.querySelector(".drawer__inner") || this.querySelector(".drawer__close"); trapFocus(e, t) }, { once: !0 }), document.body.classList.add("overflow-hidden") } close() { $(".zsiq-float").css("display", "block"), this.classList.remove("active"), removeTrapFocus(this.activeElement), document.body.classList.remove("overflow-hidden") } setSummaryAccessibility(e) { e.setAttribute("role", "button"), e.setAttribute("aria-expanded", "false"), e.nextElementSibling.getAttribute("id") && e.setAttribute("aria-controls", e.nextElementSibling.id), e.addEventListener("click", e => { e.currentTarget.setAttribute("aria-expanded", !e.currentTarget.closest("details").hasAttribute("open")) }), e.parentElement.addEventListener("keyup", onKeyUpEscape) } renderContents(t) { this.querySelector(".drawer__inner").classList.contains("is-empty") && this.querySelector(".drawer__inner").classList.remove("is-empty"), this.productId = t.id, this.getSectionsToRender().forEach(e => { (e.selector ? document.querySelector(e.selector) : document.getElementById(e.id)).innerHTML = this.getSectionInnerHTML(t.sections[e.id], e.selector) }), setTimeout(() => { this.querySelector("#CartDrawer-Overlay").addEventListener("click", this.close.bind(this)), this.open() }) } getSectionInnerHTML(e, t = ".shopify-section") { return (new DOMParser).parseFromString(e, "text/html").querySelector(t).innerHTML } getSectionsToRender() { return [{ id: "cart-drawer", selector: "#CartDrawer" }, { id: "cart-icon-bubble" }] } getSectionDOM(e, t = ".shopify-section") { return (new DOMParser).parseFromString(e, "text/html").querySelector(t) } setActiveElement(e) { this.activeElement = e } } customElements.define("cart-drawer", CartDrawer); class CartDrawerItems extends CartItems { getSectionsToRender() { return [{ id: "CartDrawer", section: "cart-drawer", selector: ".drawer__inner" }, { id: "cart-icon-bubble", section: "cart-icon-bubble", selector: ".shopify-section" }] } } customElements.define("cart-drawer-items", CartDrawerItems);